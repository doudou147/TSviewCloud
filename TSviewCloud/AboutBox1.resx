<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="logoPictureBox.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAQAAAAEACAYAAABccqhmAAAABGdBTUEAALGPC/xhBQAAAAlwSFlzAAAS
        dAAAEnQB3mYfeAAADUtJREFUeF7t1tuS47YORuG8/0vPHu2uHlvS4lGkAIL/V7VykxYtwHQq/4mIiIiI
        iIiIiIiIxPTnz5+piYgR+kF6TUQeoB9VhNyhl1SxWgG99y6ZohdSsfKK3lW9+H3Rh6tYeUPvqPJNQx+m
        YuUBvZfqayj6ABUrS/Q+alyP0aEqVhboPdS8utFhKlZvos9X79WEDlCxegt9tnq/JnSAitVs9JnKriZ0
        gIrVTPR5yq5mdIiK1Sz0Wcq2JnSAitUM9DnKR03oABWr0egzlJ+a0AEqViPR+cpPzegQFatR6GzlqyZ0
        gIrXCHSu8lcTOkDFagQ6V/msCR2gYvUUnan81oQOULF6gs5TfmtCB6h49aKzlO+a0AEqVk/Qecp3TegA
        FatedJbyXxM6QMWqB52zYiPQuZ5rQgeoWPWgc7xngd7DsiZ0gIpXKzrDYx7Re75ZEzpAxaoHneOpVdC7
        zy48GtqqiGhOL62M5plRaDSwZRHRnNZFQzOOKjQa2LJoaEbrIqN5nxQeDW1VRDSnZbug2XsKj4a2KiKa
        06od0R5aCo0GtiwamtGyndE+agqNBrYsGprRKmn/PsKjoa2KiOa0Sj5oP1R4NLRVEdGcFskd7elaaDSw
        ZRHRnBZJGu3rt9BoYMuioRmtkjza2VFoNLBVEdGcVknZdju7DmxZRDSnVSIndEksi4jmtErkhC6JZRHR
        nFaJnNAlsSwimtMykX/oglgVFc1qmcg/dEGsiopmtU4EL4ZlUdGs1ongxbAsKprVQ7I5uhRWRUbzeko2
        RZfBqshoXo/JRugCWBYZzes52QB98ZZFRzN7TwKjL9yqHdDcKyXB0Jds1Q5o7hWTAOiLtWwHNHeEZEH0
        RVq2C5o9UrII+vKs2gnNHzVxjL4wq3ZC8++SOEFfjmW7oR3smBihL8Oy3dAOdk9eRF+AVbuiXaifZDJa
        ulW7ol2oezIYLdmyndE+VDoZgBZr2e5oJyqfPEALtUp+0G5UOelAi7RKPmg/qj6pQIuzTD5oP6o9yaCF
        WSZ3tCfVliTQsqySNNqXak8uaElWSR7tTPUlf9FiLJMy2pvqa3u0FMukHu1Ptbc1Wohl0oZ2qPraEi3C
        KulH+1TtbYeWYJU8R3tVbW2DhrdMxqH9qvq2QINbJuPRnlW5LdDgVsl8tHeVLjwa2ip5D+1fcWHRsJaJ
        Dfou1KewaFjLxB59Lyro3aRBrRJ/6HvatZBoUKv+vs0l8Ya+t50KhQa07Pzjvybe0HcYvVBoQMvOP/hc
        4hF9p9EKhQa06vwDb0k8ou84SmHQcFadf9Q9iVf0fa9cCDSYZecf85PEM/ruVysEGsyy84/4abICugcr
        FAINZtX5xzsyWQHdCe8tj4ay6vyjnZGsgu6Hx5ZGA1l2/rHOSlZBd8RbS6OBLDv/UGcmK6G74qWF8UBG
        Hf7/Tu8mqzjuh8cW9fMDoIGMIv/ec26yiuNOeGtBPxefhjGs5N97z0lWcdwFTy3mc+lpGMNanOYYl6zg
        +P49tZDzhadhDOtxm+l5soLju/fSIq4XnYcx6imcrz/x7vjOvbSA6wX/iYYxagScsb+xjve7Jv1on1Y5
        932pP9Egho2E8/Y1zvFelPShXVrl2PdlPkeDGDYaztzXGMc7pZJ2tEerHPu+yOdoEKNmwtnbeu54j1LS
        hnZokWPfl/geDWPUbDh/W88c71Cb1KHdWeTU9+W9R4MY9gbcQ1v9js9vSfJoZ1Y59H1pORrEsLfgLtrq
        c3x2T8JoV1Y59H1hORrEqLfhPuprd3zmk+SO9mSRQ9+XNR0NY5QF3El9bY7PG5H8oN1Y5cz3JU1Hgxhm
        BXdTX73js0a2O9qJVc58X9B0NIhhlnA/ddU7PmdGO6I9WObI9+XMR4MYZQ33U1+d43Nmtgua3TJnvi9m
        PhrGKA9wR3WVHee/1f39flsfzWudI9cvPB0NYpgXuKu68o6zLbq/53froNk85Mj1y81HwxjmBe6qrrzj
        bOvu7/ydTzSHpxy5fqH5aBijvMF91ZV2nOut+/sf+UDv6y1Hrl9iORrIKI9wZ+XSjjO9VzvLLPROnnPk
        +uXlo2EM8wj3Vtfdcd7qjUTnr5Yj35evLhrIMK9wd+XujrNUrBy5XsByNJBRnuHuyt0dZ6k4OXK9fHXR
        UEZ5h/srd3aco2LkzPXilaOhDPMOd1ju4zhDxcih68UrR4MZtgLcY76P43kVI2eul67Y4TaUYaugXVb0
        43herZ9D1wtX7HAbzLBV0C4r+nE8r9bOoetlK3a4DWbcSminhX4cz6p1c+p62YodbsMZtxLaaaG//7zP
        rBbKsetly/brNqBxK6G9FjueU+vl3P2iFfp1G9Sw1dBeix3PqbVawP2iFfp1G9awFdFusx3PqHVawP2S
        Ffp1G9a4FdF+kx1/r9ZoIfeLVujXbWjjVkT7TXb8vfLfYu4XLdO32+CGrYp2nOz4e+W3Bd0vWaFvtwUY
        tiracbHjOeWnhd0vV6FftyUYtyracVPHGcqmAO4XKtO32zKMWxXtubvjPDW/IO4XqNC321IMWxnt+Um/
        rjtSAwrmdnlKfbstx7CV0Z57S7nuSzUU2O0C5fp2W5JxK6Nd91TrujsFbeJ2iXJ9uy3MuJXRrlt76rrP
        LdvM7RKVknlo37XNcPphREz4MuWSeWjfNb3t9CNaJUG3y5RL5qKd1+TV6Qc4M+l2u0y5ZC7aealIaL6K
        pBMtM5vMRTvPFRHNWUg60TKTyXy091RR0ayFpBMtM5nMR3tPFRXNWpF0oEUmk/lo71R0NHMhaURLzCbz
        0d6p6GjmQtKIlphM5qO9p4qOZi4kjWiJyWQ+2nuq6GjmQtKIlphM5qO9p4qOZq5IGtACk8lctPNUu6DZ
        C0klWl42mYt2nmoXNHshqUTLSyZz0c5z7YJmLySVaHnJZC7aeaqd0PyFpBItL5nMQ/vOtROav9AIdG5L
        S6AXTybz0L5z7YTmL9SLzhqRS/Si2WQe2neq3dAOCrWg52fmBr1cMpmH9p1rN7SDQjXouTczRy+VTOah
        fafaEe2hUAr9rXVm6GWSyTy071Q7oj0USqG/9ZAJepFkMgftOtWuaBeFruhvPPYqeoFkMgftOtWuaBeF
        vtG/99wr6IOzyRy0a2pntI/gTUcfmkzmoF2n2hntY4Omog9MJnPQrqnd0U42agr6oGQyB+36mmz/H4Cj
        4ehDksl4tGdKbP8D0IrOGNBw9CHJZCzaMSU/aDczG4XOftBQ9AHJZCza8TX5oP3MaBb6rM6GocOTyVi0
        42vyQfsZ2Vvoszt6jA7NJuPQfin5oP2M6m30Dh09Qgcmk7Fox5R80H6eZonep7FH6MBkMhbt+Jp80H6e
        5gW9W0Pd6LBkMg7tl5IP2s+TvKF3bKgLHZRMxqH9UvJB++nNK3rXyrrQQclkDNptKvmg/fTmFb1rQ83o
        kGQyBu02lXzQflpbAb13Q03ogGTyHO01lXzQflpbCb1/ZU3ogGTyHO01lXzQflpaEc1RWTV6OJmMQbu9
        Jme0o9pWRbNUVo0eTibj0H5/kzPaUW2ro5kqq0IPJpM5tNu06x1sKQqaraIq9GAykbfRPawpEpqvsiJ6
        KJnIm+gO1hYNzVhRET2UTOQtdP9qi4jmrKiIHkom8ha6fzVFRvNWlEUPJBN5A9292iKjeSvKogeSicxG
        966l6GjmQln0QDaRmejO1bYDmruiLHogmcgsdN9a2gHNXVEWPZBMZBa6b7XthOYvlEUPJBOZge5aSzuh
        +Qtl0QPJRGagu9bSTmj+ipLoj5OJjEb3rKUd0R4KJdEfJxMZje5ZSzuiPRRKoj/OJjIK3a+WdkW7KJRF
        DyQTGYXuV0u7ol0UyqIHkomMQHerpZ3RPgpl0QPJREagu9XS7mgnhZLoj7OJPEX3qjbR/wXI4uhe1SQ/
        aDeFsuiBZCJP0J2qTX7Qbgpl0QPZRHrQXapNPmg/hbLogWwiPegu1SRntKNCRfRQNpFWdI9qkjPaUaEi
        eiibSCu6R6XkjvZUqIgeyibSg+5SKmG0q0JV6MFsIq3oHqUSRrsqVIUezCbSg+7SNUmjfRWqRg9nE+ml
        +9SOdlZRNXq4mIi8g35/hZrQAcVE5B30+yvUjA4pJiLz0W+vUDM6pJiIzEW/u4q60EHFRGQe+s1V1I0O
        KyYic9DvrdAjdGBVIjIW/c4qeowOrUpExqHfWEWP0aHVichz9NuqaBg6vDoReYZ+VxUNRR9QnYj0od9T
        ZcPRh1QnIm3od1TZFPRBTYlIHfr9NDQNfVhzIpJHv5vKpqMPbU5EGP1eGnoFfXBXIvKDfh+NvYpeoDuR
        ndFvojET9CKPEtkN/Q46MkMv8ziR6Ojed2aOXmpYIlHQ/X6YG/RywxNZEd3lAblDLzk1EY/ork7ILXpZ
        s0RmoLv2Yu7RSy+VxEDf7cIth4ZQkJTR3jZqWTSM6mh1NJOqKgQaTCmVLxwaUil1LjwaWqnd2w4tQakd
        2x4tRanISQItS6koSQNaoFIrJQPRgpXylBigL0KpGcmC6ItU8RMxRZdS9SUSHl38KImIyLv+++9/pBWt
        bAsFW+IAAAAASUVORK5CYII=
</value>
  </data>
</root>